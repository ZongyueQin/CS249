# import numpy as np# from deeprobust.graph.data import Dataset# from deeprobust.graph.defense import GCN# from deeprobust.graph.defense.adv_training import AdvTraining# import torch# import osimport osimport argparsefrom attack import apply_Random, apply_DICE, apply_PGDAttackfrom deeprobust.graph.data import PrePtbDataset, Datasetfrom deeprobust.graph.defense import GCNJaccard, GCNSVD, RGCNparser = argparse.ArgumentParser()args = parser.parse_args("")args.dataset = 'cora'#args.n_classes = 10args.lr = 2e-4args.n_hids = 32args.n_heads = 1                # currently not used in GNN2 implementation?args.n_layer = 2                # same in defaultargs.dropout = 0.2args.num_epochs = 200           # same in defaultargs.weight_decay = 0.01args.w_robust = 0args.step_per_epoch = 1args.device = deviceargs.n_perturbations = 1000args.max_no_increase_epoch_num = 10def main():    data = Dataset(root='dataset/', name='cora', seed=15)    adj, features, labels = data.adj, data.features, data.labels    idx_train, idx_val, idx_test = data.idx_train, data.idx_val, data.idx_test    perturbed_adj = apply_Random(adj, n_perturbations=args.n_perturbations)    perturbed_adj_dice = apply_DICE(adj, labels, n_perturbations=args.n_perturbations)    meta_adj_list = []    for rate in [0.05, 0.1, 0.15, 0.2, 0.25]:        perturbed_data = PrePtbDataset(root = 'dataset/',                                           name = 'cora',                                           attack_method = 'meta',                                           ptb_rate = rate)        meta_adj_list.append(perturbed_data.adj)    nettack_adj_list = []    for rate in [1.0, 2.0, 3.0, 4.0, 5.0]:        perturbed_data = PrePtbDataset(root = 'dataset/',                                           name = 'cora',                                           attack_method = 'nettack',                                           ptb_rate = rate)        nettack_adj_list.append(perturbed_data.adj)    # model = GCNJaccard(nfeat=features.shape[1],    #                      nhid=args.n_hids,    #                      nclass=labels.max().item() + 1,    #                      dropout=args.dropout,    #                      lr=args.lr, weight_decay=args.weight_decay,    #                      device='cpu').to('cpu')    # print("This is GCN Jaccard \n\n\n")    # model = GCNSVD(nfeat=features.shape[1],    #                     nhid=args.n_hids,    #                     nclass=labels.max().item() + 1,    #                     dropout=args.dropout,    #                     lr = args.lr,    #                     weight_decay = args.weight_decay,    #                     device='cpu').to('cpu')    #    # print("This is GCN SVD \n\n")    #    model = RGCN(nnodes=perturbed_adj.shape[0], nfeat=features.shape[1],                 nclass=labels.max() + 1, nhid=args.n_hids,                 dropout=args.dropout,                 lr=args.lr, weight_decay=args.weight_decay,                 device='cpu')    print("This is RGCN \n\n")    print("clean!! \n")    # model.fit(features, adj, labels, idx_train, idx_val, threshold=0.03)  # jaccard    # model.fit(features, adj, labels, idx_train, idx_val, k=20)            # svd    model.fit(features, adj, labels, idx_train, idx_val,              train_iters=args.num_epochs)    model.test(idx_test)    print("random!! \n")    # model.fit(features, perturbed_adj, labels, idx_train, idx_val, threshold=0.03)  # jaccard    # model.fit(features, perturbed_adj, labels, idx_train, idx_val, k=20)              # svd    model.fit(features, perturbed_adj, labels, idx_train, idx_val,              train_iters=args.num_epochs)    model.test(idx_test)    print("meta! \n")    for adj in meta_adj_list:        # model_1.fit(features, adj, labels, idx_train, idx_val, threshold=0.03)    # jaccard        # model.fit(features, adj, labels, idx_train, idx_val, k=20)        model.fit(features, adj, labels, idx_train, idx_val,                  train_iters=args.num_epochs)        model.test(idx_test)    print("dice!! \n")    # model_1.fit(features, perturbed_adj_dice, labels, idx_train, idx_val, threshold=0.03)    # model.fit(features, perturbed_adj_dice, labels, idx_train, idx_val, k=20)    model.fit(features, perturbed_adj_dice, labels, idx_train, idx_val,              train_iters=args.num_epochs)    model.test(idx_test)    print("net!! \n")    for adj in nettack_adj_list:        # model.fit(features, adj, labels, idx_train, idx_val, threshold=0.03)        # model.fit(features, adj, labels, idx_train, idx_val, k=20)        model.fit(features, adj, labels, idx_train, idx_val,                  train_iters=args.num_epochs)        model.test(idx_test)if __name__ == "__main__":    main()